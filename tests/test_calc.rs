use calc::exec;

#[test]

fn test_exec() {
    for tc in vec![
        ("-(1+1)", -2.0),
        ("-(1.3+1.9)", -(1.3 + 1.9)),
        ("-5", -5.0),
        ("4 - 9", -5.0),
        ("(1+4*5)-5", ((1.0 + 4.0 * 5.0) - 5.0)),
        ("4/(4-1)*5", 4.0 / (4.0 - 1.0) * 5.0),
        ("4/5/6/7", 4.0 / 5.0 / 6.0 / 7.0),
        ("2/2/3", 2.0 / 2.0 / 3.0),
        ("3/3/4/5/6", 3.0 / 3.0 / 4.0 / 5.0 / 6.0),
        ("(3-1)*5+1", (3.0 - 1.0) * 5.0 + 1.0),
        ("2^3^2", (2 as f64).powf((3 as f64).powf(2.0))),
        ("2.3^3^2", (2.3 as f64).powf((3 as f64).powf(2.0))),
        ("(2^3)^2", (2 as f64).powf(3.0).powf(2.0)),
        ("5^3/2", (5 as f64).powf(3.0) / 2.0),
        ("5.3^3/2.7", (5.3 as f64).powf(3.0) / 2.7),
        ("5^3*2", (5 as f64).powf(3.0) * 2.0),
        ("2*5^3", 2.0 * (5 as f64).powf(3.0)),
        ("5^3+2", (5 as f64).powf(3.0) + 2.0),
        ("5^3-2", (5 as f64).powf(3.0) - 2.0),
        ("5*3^2", (5.0 * (3 as f64).powf(2.0))),
        ("5*(3^2)", 5.0 * (3 as f64).powf(2.0)),
        ("3/(3/4/5)/6", 3.0 / (3.0 / 4.0 / 5.0) / 6.0),
        (
            "3/(3*3-2/4/5)^2/6",
            3.0 / ((3.0 * 3.0 - 2.0 / 4.0 / 5.0) as f64).powf(2.0) / 6.0,
        ),
        (
            "1+3/(3*3-2/4/5)^2/6",
            1.0 + 3.0 / ((3.0 * 3.0 - 2.0 / 4.0 / 5.0) as f64).powf(2.0) / 6.0,
        ),
        (
            "1+3/(3*3-2/4/5)^2 / 6 mod 4",
            1.0 + 3.0 / ((3.0 * 3.0 - 2.0 / 4.0 / 5.0) as f64).powf(2.0) / 6.0 % 4.0,
        ),
        ("2+(4*3/2)", 2.0 + (4.0 * 3.0 / 2.0)),
        ("2+4^3-6", 60.0),
        ("2*4^3", 2.0 * (4 as f64).powf(3.0)),
        ("(((2)))", 2.0),
        ("((((((((((3.5))))))))))", 3.5),
        ("( (((( (((  ((3.5) )))    )))) ))", 3.5),
        ("2^2", 4.0),
        ("(2)^2", 4.0),
        ("(2)^(2)", 4.0),
        ("4 mod 5", 4.0 % 5.0),
        ("(4 mod 5)", 4.0 % 5.0),
        ("4 mod 5 * 2", (4.0 % 5.0) * 2.0),
        ("4 mod 5 * 2", 4.0 % 5.0 * 2.0),
        ("4 mod 5 / 2", (4.0 % 5.0) / 2.0),
        ("4 mod 5 + 2", 4.0 % 5.0 + 2.0),
        ("4 + 17 mod 9", 4.0 + 17.0 % 9.0),
        ("4 * 17 mod 9", 4.0 * 17.0 % 9.0),
        ("4 / 17 mod 9", 4.0 / 17.0 % 9.0),
        ("32 / 3 mod 7", 32.0 / 3.0 % 7.0),
        ("2 ^ 3 mod 7", (2 as f64).powf(3.0) % 7.0),
        ("9 mod 10 mod 6", 9.0 % 10.0 % 6.0),
        ("11 mod 12 mod 7 mod 3", 11.0 % 12.0 % 7.0 % 3.0),
    ] {
        let res = exec(tc.0).unwrap();
        // if res != tc.1 {
        //     panic!(format!("{} expected {}, got {}", tc.0, tc.1, res));
        // }
        assert_eq!(res, tc.1);
    }
}
